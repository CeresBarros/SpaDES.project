% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setupProject.R
\name{setupProject}
\alias{setupProject}
\title{Sets up a new or existing SpaDES project}
\usage{
setupProject(
  name,
  paths,
  modules,
  packages,
  optionsStyle = 1,
  require = c("reproducible", "SpaDES.core"),
  useGit = FALSE,
  setLinuxBinaryRepo = TRUE,
  standAlone = TRUE,
  libPaths = paths$packagePath,
  overwrite = FALSE,
  verbose = 1
)
}
\arguments{
\item{name}{The name of the project; if this is a GitHub project, then it should
indicate the full Github repository and branch name, e.g.,
\code{"PredictiveEcology/WBI_forecasts@ChubatyPubNum12"}}

\item{paths}{a list with named elements, specifically, \code{modulePath}, \code{projectPath},
\code{packagePath} and all others that are in \code{SpaDES.core::setPaths()} \verb{( inputPath, outputPath, scratchPath, cachePath, rasterTmpDir)}}

\item{modules}{a character string of modules to pass to \code{getModule}. These
should be in the form \code{GitHubAccount/Repo@branch} e.g.,
\code{"PredictiveEcology/Biomass_core@development"}. If the project is a git repository,
then it will not try to re-get these modules; instead it will rely on the user
managing their git status outside of this function.}

\item{packages}{A vector of packages that are needed. This will be passed to
\code{Require}}

\item{optionsStyle}{A numeric representing a set of pre-determined options. Currently,
this can be either 1 (cache using qs and memoise, prepInputs uses terra & sf,
no moduleCodeChecks) or 0 (no options).}

\item{setLinuxBinaryRepo}{Logical. Should the binary RStudio Package Manager be used
on Linux (ignored if Windows)}

\item{overwrite}{Logical. Passed to \code{getModule}}

\item{verbose}{An integer specifying how much verbosity should be shown. Passed
to various internal functions, including \code{Require}. Default is 1. The higher the number
the more verbosity. Set to -1 for almost no messaging.}
}
\description{
The main things this function does are: creates folder structures, downloads or
confirms existence of modules, install missing packages from both the modules
\code{reqdPkgs} fields and the user passed \code{packages}. See Details.
}
\details{
This function bundles a sequence of functions: \code{.libPaths()}, \code{getModule}, \code{setwd},
\code{Require}
}
\examples{
\dontrun{
setupProject(name = "SpaDES.project",
             paths = list(modulePath = "m", projectPath = "~/GitHub/SpaDES.project",
                          scratchPath = tempdir()),
             modules = "PredictiveEcology/Biomass_borealDataPrep@development",
             useGit = TRUE
)


SpaDES.project::setupProject(
  paths = list(projectPath = "~/CeresPaper"),
  standAlone = TRUE,
  require =
    c("PredictiveEcology/reproducible@development (>= 1.2.16.9017)",
      "PredictiveEcology/SpaDES.core@development (>= 1.1.0.9001)"),
  modules = c("CeresBarros/Biomass_speciesData@master",
              "CeresBarros/Biomass_borealDataPrep@development",
              "CeresBarros/Biomass_core@master",
              "CeresBarros/Biomass_validationKNN@master",
              "CeresBarros/Biomass_speciesParameters@development")

  )
}
}
